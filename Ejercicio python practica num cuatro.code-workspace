from datetime import date, datetime

cuenta1 = CuentaBancaria("Paloma",333333,'2004/10/11',15000)

print(cuenta1.obtener_edad())

from abc import ABC , abstractmethod

class CuentaBancaria(ABC):
    def __init__(self,nombre_titular,dni_titular, fecha_nacimiento, saldo=15000):
        self._nombre_titular = nombre_titular       #atributo privado
        self._dni_titular = dni_titular             #atributo privado
        self._fecha_nacimiento = datetime.strptime(fecha_nacimiento, '%Y/%m/%d').date()
        self._saldo = saldo                         #atributo privado
    @abstractmethod
    def calcular_area(self):
    pass

    @abstractmethod
    def calcular_perimetro(self):
    pass

    def obtener_nombre(self):
        return self._nombre

    def obtener_saldo(self):
        return self._saldo
    
    def depositar(self,monto):
        if monto > 0:
            self._saldo += monto
            print(f"Se ha depositado {monto} a la cuenta de {self._nombre_titular}, su saldo es de: {self.obtener_saldo()}")
        else:
            print("El monto a depositar debe ser mayor a 0")

    def extraer(self,monto):
        if monto <= self.obtener_saldo():
            self._saldo -= monto
            print(f"Se ha extraido {monto} de la cuenta de {self._nombre_titular}, su saldo acutal es de: {self.obtener_saldo()}")
        else:
            print("No posee saldo suficiente para esta operaciÃ³n")

    def _caclular_edad(self):
        fecha_actual = date.today()
        edad = fecha_actual - self._fecha_nacimiento
        return edad.days // 365
    
    def obtener_edad(self):
        return self._calcular_edad()
from cb import CuentaBancaria
